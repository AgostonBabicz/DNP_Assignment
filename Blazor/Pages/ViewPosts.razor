@page "/ViewPosts"
@using Domain.Models
@using UIComponents
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IPostService postService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavMgr

<h3>All Posts</h3>
<AuthorizeView>
    <Authorized>
        @if (posts == null)
        {
        }
        else if (!posts.Any())
        {
            <p>Hey, what are you waiting for? Start a discussion!</p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Username</th>
                    <th>Title</th>
                    <th>Post</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in posts)
                {
                    <tr @onclick="()=>ShowPopUp(item)">
                        <td>@item.Owner.Username</td>
                        <td>@item.Title</td>
                        <td>@item.Body</td>
                    </tr>
                }
                </tbody>
            </table>
        }
        <Modal ShowModal="showModal">
            <button @onclick="@GoOn">Go Back</button>
            <div class="currentPost">
                <p class="ownerTitle">@selectedPost.Owner.Username - @selectedPost.Title</p>
                <p class="currentPostBody">@selectedPost.Body</p>
                <p class="postDate">@selectedPost.DateTime</p>
            </div>
            @if (selectedPost.Owner.Username == context.User.Identity.Name)
            {
                <button @onclick=" () => DeletePost(selectedPost.Id)"> Delete </button>
            }
            <hr/>
            <div>
                @if (comments != null)
                {
                     <label>@comments.Count() Comments</label>
                }
                <div class="commentField">
                    <input type="text" @bind="commentBody" placeholder="Add a comment..."/>
                    <button @onclick="() => AddComment(selectedPost)">Comment</button>
                </div>
            </div>
            <div>
                <label>@selectedPost.UpVotes Upvotes</label>
                
                <div class="votes">
                    <img src="upvote.png" alt="Upvote" @onclick="() => AddUpvote(selectedPost)" />
                        <img src="downvote.png" alt="Downvote" @onclick="() => AddDownvote(selectedPost)" />
                </div>
            </div>

            @if (comments != null)
            {
                <div>
                    @foreach (var comment in comments)
                    {
                        <h6>@comment.Owner.Username:</h6>
                        <p>@comment.CommentBody</p>
                    }
                </div>
            }
            else
            {
                <div>
                    <p>There are no available comments for this post. Be the first one to comment!</p>
                </div>
            }
            
        </Modal>
        
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
    </Authorized>
    
    <NotAuthorized>
        <p>Please login to see all posts and to add comments.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string? user;
    private bool showModal;
    private Post selectedPost;
    private IEnumerable<Post> posts;
    private IEnumerable<Comment> comments = null;
    private string msg;
    private string? commentBody="";
    private int upvotes;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user.Identity != null)
        {
            this.user = user.Identity.Name;
        }
        await LoadPosts();
    }
    private async Task LoadPosts()
    {
        try
        {
            posts = await postService.GetAsync(null,null,null);
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            msg=e.Message;
        }
    }

    private async Task LoadComments(int postId)
    {
        try
        {
            comments = await postService.GetCommentsForPost(postId);
        }
        catch (Exception e)
        {
            msg = e.Message;
        }
    }

    private async void ShowPopUp(Post post)
    {
        await LoadComments(post.Id);
        showModal = true;
        selectedPost = post;
    }

    private void GoOn()
    {
        showModal = false;
        commentBody = "";
    }
    
    private async Task AddComment(Post post)
    {
        if (commentBody != null)
        {
            CommentCreationDto commentDto = new CommentCreationDto(user, DateTime.Now, post, commentBody);
            Comment newComment = await postService.AddCommentAsync(commentDto);
            await LoadComments(post.Id);
            commentBody = "";
        }
        else
        {
            msg = "comment body cannot be empty";
        }
    }
    
    private async Task AddUpvote(Post post)
    {
        try
        {
            UpvoteCreationDto upvoteCreationDto = new UpvoteCreationDto(1, post, user);
            int newVote = await postService.AddUpvoteAsync(upvoteCreationDto);
            selectedPost.UpVotes += newVote;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task AddDownvote(Post post)
    {
        try
        {
            UpvoteCreationDto upvoteCreationDto = new UpvoteCreationDto(-1, post, user);
            int newVote = await postService.AddUpvoteAsync(upvoteCreationDto);
            selectedPost.UpVotes += newVote;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task ShowVotes(Post post)
    {
        upvotes = post.UpVotes;
    }
    
    private async Task DeletePost(int selectedPostId)
    {
        await postService.DeletePost(selectedPostId);
        NavMgr.NavigateTo("/ViewPosts", true);
    }
    
}