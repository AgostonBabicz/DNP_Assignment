@page "/ViewPosts"
@using Domain.Models
@using UIComponents
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IPostService postService
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h3>All Posts</h3>
<AuthorizeView>
    <Authorized>
        @if (posts == null)
        {
        }
        else if (!posts.Any())
        {
            <p>No Todos to display</p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Username</th>
                    <th>Title</th>
                    <th>Post</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in posts)
                {
                    <tr @onclick="()=>ShowPopUp(item)">
                        <td>@item.Owner.Username</td>
                        <td>@item.Title</td>
                        <td>@item.Body</td>
                    </tr>
                }
                </tbody>
            </table>
        }
        <Modal ShowModal="showModal">
            <button @onclick="@GoOn">Go Back</button>
            <div class="currentPost">
                <p class="ownerTitle">@selectedPost.Owner.Username - @selectedPost.Title</p>
                <p class="currentPostBody">@selectedPost.Body</p>
                <p class="postDate">@selectedPost.DateTime</p>
            </div>
            <hr/>
            <div>
                <label>@selectedPost.Comments.Count Comments</label>
                <div class="commentField">
                    <input type="text" @bind="commentBody" placeholder="Add a comment..."/>
                    <button @onclick="() => AddComment(selectedPost)">Comment</button>
                </div>
            </div>

            <div>
                @foreach (var comment in selectedPost.Comments)
                {
                    <h6>@comment.Owner.Username:</h6>
                    <p>@comment.CommentBody</p>
                }
            </div>
            
        </Modal>
        
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
    </Authorized>
    
    <NotAuthorized>
        <p>Please login to see all posts and to add comments.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string? user;
    private bool showModal;
    private Post selectedPost;
    private IEnumerable<Post> posts;
    private string msg;
    private string? commentBody="";

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user.Identity != null)
        {
            this.user = user.Identity.Name;
        }
        await LoadPosts();
    }
    private async Task LoadPosts()
    {
        try
        {
            posts = await postService.GetAsync(null,null,null);
            Console.WriteLine(posts);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg=e.Message;
        }
    }

    private void ShowPopUp(Post post)
    {
        showModal = true;
        selectedPost = post;
    }

    private void GoOn()
    {
        showModal = false;
        commentBody = "";
    }
    
    private void AddComment(Post post)
    {
        if (commentBody!=null)
        {
            postService.AddCommentAsync(new CommentCreationDto(user, DateTime.Now, post, commentBody));
        }
        else
        {
            msg = "The comment body cannot be empty!";
        }
    }

}